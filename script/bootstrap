#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

if ! [ -d $HOME/.dotfiles ]; then
  echo "Linking dotfiles from $DOTFILES_ROOT to $HOME/.dotfiles"
  ln -sf $DOTFILES_ROOT $HOME/.dotfiles
fi

set -e

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then
        skip=true;
      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?\n\
        Defaulting to [S]kip all if no response received within 30 seconds."
        read -n 1 -t 30 action || { echo "No response received, skipping all"; skip_all=true; };

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

# Check which system we are on
if [ "$(uname -s)" == "Darwin" ]; then
  DOTFILE_SYSTEM_TYPE="macos"
fi

if [ "$CODESPACES" ]; then
  DOTFILE_SYSTEM_TYPE="codespaces"
fi

if hostname | grep -q "bpdev-us-east-1.github.net"; then
  DOTFILE_SYSTEM_TYPE="bpdev"
fi

# write out the system type to a file
echo $DOTFILE_SYSTEM_TYPE > $DOTFILES_ROOT/.system

# Default values for the conflict resolution
overwrite_all=false backup_all=false skip_all=false

# Override the files if we're on a non interactive system.
if [ $DOTFILE_SYSTEM_TYPE = "codespaces" ]; then overwrite_all=true; fi
if [ $DOTFILE_SYSTEM_TYPE = "bpdev" ]; then overwrite_all=true; fi

if [ -n "${DOTFILES_OVERWRITE_CONFLICTS}" ]; then overwrite_all=true; fi
if [ -n "${DOTFILES_BACKUP_CONFLICTS}" ]; then backup_all=true; fi
if [ -n "${DOTFILES_SKIP_CONFLICTS}" ]; then skip_all=true; fi

# Link all the files that should go into our home directory
for src in $(find -H -L "$DOTFILES_ROOT/${DOTFILE_SYSTEM_TYPE}" -maxdepth 2 -name '*.symlink')
do
  dst="$HOME/.$(basename "${src%.*}")"
  link_file "$src" "$dst"
done

# Perform all install scripts
for src in $(find -H -L "$DOTFILES_ROOT/${DOTFILE_SYSTEM_TYPE}" -maxdepth 2 -name '*.install')
do
  source "$src"
done